migrate:
  ## migrate mode
  ## 'immediate' migrate
  ## 'pretend' : just run stage 1 without modifying anything
  ## 'extract' : do not migrate extract image instead
  mode: immediate
  ## where required files are expected
  work_dir: .
  ## migrate all found wifi configurations
  all_wifis: true
  ## automatically reboot into stage 2 after n seconds
  reboot: 5
  log:
    ## use this drive for stage2 persistent logging
    # drive: '/dev/sda1'
    ## stage2 log level (trace, debug, info, warn, error)
    level: debug
  # path to stage2 kernel - must be a balena os kernel matching the device type
  kernel: 
    path: balena.zImage
    hash: 
      md5: f1b3e346889e190279f43e984c7b693a
  ## path to stage2 initramfs
  initrd: 
    path: balena.initrd.cpio.gz
  # hash:
  #   md5: <md5sum of balena.initrd.cpio.gz>
  backup:
  ## network manager configuration files
  nwmgr_files:
    # - eth0_static
  ## use internal gzip with dd true | false
  gzip_internal: ~
  ## Extra kernel commandline options
  # kernel_opts: "panic=20"
  ## Use the given device instead of the boot device to flash to
  # force_flash_device: /dev/sda
  ## delay migration by n seconds - workaround for watchdog not disabling
  # delay: 60
  ## kick / close configured watchdogs
  # watchdogs:
    # path to watchdog device
    # - path: /dev/watchdog1
      ## optional interval in seconds - overrides interval read from watchdog device
      # interval: ~
      ## optional close, false disables MAGICCLOSE flag read from device
      ## watchdog will be kicked instead
      # close: false
  ## by default migration requires some network manager config to be present (eg from wlan or supplied)
  ## set this to false to not require connection files
  require_nwmgr_config: true
balena:
  image:
    ## use dd / flash balena image
    dd:
      path: <insert image to flash> 
    # hash:
    #   md5: <insert md5 of image to flash>
  ## config.json file to inject
  config: 
    path: config.json
    # hash:
    #   md5: <insert md5 of config>    
  ## application name
  app_name: <insert application name>
  ## check for api connection
  check_api: true
  ## check for vpn connection
  check_vpn: true
  ## timeout for checks
  check_timeout: 20
debug:
  ## don't flash device - terminate stage2 and reboot before flashing
  no_flash: true
