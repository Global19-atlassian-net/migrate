migrate:
  # mode AGENT, IMMEDIATE, PRETEND
  #  AGENT - not yet implemented, connects to balena-cloud, controlled by dashboard
  #  IMMEDIATE: migrates the device
  #   not yet implemented:
  #     if app, api, api_key, are given in balena section, config & image can be downloaded
  #  PRETEND: only validates conditions for IMMEDIATE, changes nothing
  mode: IMMEDIATE
  # where all files are expected to be found
  work_dir: './work/'
  # migrate all wifi configurations found on device
  all_wifis: true
  # migrate only the following wifi ssid's (overrides all_wifis)
  wifis:
    - 'Xcover'
    - 'QIFI'
    - 'bla'
  # reboot automatically after n seconds
  reboot: 10
  # not yet implemented, subject to change
  log_to:
    drive: "/dev/sda1"
    fs_type: ext4
  # the migrate kernel, might be downloaded automatically in future versions
  kernel_file: "balena_x86_64.migrate.kernel"
  # the migrate initramfs, might be downloaded automatically in future versions
  initramfs_file: "balena_x86_64.migrate.initramfs"
  # backup configuration
  backup:
  # what to do on a recoverable fail in phase 2, either reboot or rescueshell
  fail_mode: Reboot
  # forced use of a device slug other than the one detected
  force_slug: 'dummy_device'
balena:
  # the balena image version to download (not yet implemented)
  version:
  # the balena image to flash
  image: image.gz
  # the balena config file to use (can be auto generated in future versions)
  config: config.json
  # The balena app name - needed for download (not yet implemented) checked against present config.json
  app_name: 'test'
  # Api to use for connectivity check, agent mode, downloads etc
  api:
    ## defaults as follows
    # host: "api.balena-cloud.com"
    # port: 443
    # check: true
    ## Api key  to use for agent mode, downloads etc
    key: "secret"
  ## VPN to use for connectivity check
  vpn:
    ## defaults as follows
    # host: "vpn.balena-cloud.com"
    # port: 443
    # check: true

  ## connectivity check timeout
  # check_timeout: 20

debug:
  # ignore non admin mode
  fake_admin: true
  # flash to a device other than the boot device
  force_flash_device: '/dev/sdb'
  # skip flashing - only used with force_flash_device
  skip_flash: false
  # run migration up to phase2 but stop & reboot before flashing
  no_flash: true
